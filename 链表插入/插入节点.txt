#include<stdio.h>
#include<string.h>
#include<stdlib.h>
typedef struct NODE
{
	int id;
	struct NODE * pNext;

}Node;
Node * GetNode(int id);
void AddGetNode(Node **ppHead,Node **ppEnd,Node* Node);
void InsertNode(Node **ppHead,Node **ppEnd,Node *pNode,int id);
int main()
{

	Node *pHead=NULL;
	Node *pEnd=NULL;
	AddGetNode(&pHead,&pEnd,GetNode(1));
	AddGetNode(&pHead,&pEnd,GetNode(2));
	AddGetNode(&pHead,&pEnd,GetNode(3));
	AddGetNode(&pHead,&pEnd,GetNode(4));
	InsertNode(&pHead,&pEnd,GetNode(5),1);
	InsertNode(&pHead,&pEnd,GetNode(5),2);
	
	while(pHead!=NULL)
	{
		printf("%d\n",pHead->id);
		pHead=pHead->pNext;
	}

return 0;
}
// 申请节点
Node * GetNode(int id)
{
Node *pTemp=(Node *)malloc(sizeof(Node));
pTemp->id=id;
pTemp->pNext=NULL;

return pTemp;

}
// 添加节点
void AddGetNode(Node **ppHead,Node **ppEnd,Node* Node)
{
	if(*ppHead==NULL)
	{
		*ppHead=Node;
	//	*ppEnd=*ppHead;
	}
	else
	{
		(*ppEnd)->pNext=Node;//(*p).pNext=Node;
	}
	*ppEnd=Node;
}
//插入节点
void InsertNode(Node **ppHead,Node **ppEnd,Node *pNode,int id)
{
	Node *pMark=*ppHead;
	if((*ppHead)->id==id)//头插入；
	{
		pNode->pNext=*ppHead;//新来的节点指向下一个头指针（窍门  先连后簖）
		*ppHead=pNode;//头指针指向新节点
	return;
	}
	

		while(pMark->pNext!=NULL)//遍历链表  到倒数第二个；
		{
			
			if(pMark->pNext->id==id)//标记下一个节点 是否与id相等
			{
				pNode->pNext=pMark->pNext;//新来节点的下一个指向标记的下一个；
				pMark->pNext=pNode;//标记的下一个指向新来的节点；
				return;
			}
			pMark=pMark->pNext;
		}
		(*ppEnd)->pNext=pNode;//尾部添加
		*ppEnd=pNode;
	return;
}