#include<stdio.h>
#include<string.h>
#include<stdlib.h>
typedef struct NODE
{
	int id;
	struct NODE *pNext;

}List;
List * GetNode(int id);
void InsetNode(List **ppHead,List **ppEnd,List *pNode,int id);
void AddGetNode(List **ppHead,List **ppEnd,List *pNode);
void DeleteNode(List **ppHead,List **ppEnd,int id);
int main()
{
	List *pHead=NULL;
	List *pEnd=NULL;
	AddGetNode(&pHead,&pEnd,GetNode(1));
	AddGetNode(&pHead,&pEnd,GetNode(2));
	AddGetNode(&pHead,&pEnd,GetNode(2));
	AddGetNode(&pHead,&pEnd,GetNode(4));
	//InsetNode(&pHead,&pEnd,GetNode(5),5);
	DeleteNode(&pHead,&pEnd,2);
	while(pHead!=NULL)
	{
		printf("%d\n",pHead->id);
		pHead=pHead->pNext;
	}

return 0;
}
List * GetNode(int id)
{
	List *pTemp=(List *)malloc(sizeof(List));
	pTemp->id=id;
	pTemp->pNext=NULL;
	return pTemp;

}

void AddGetNode(List **ppHead,List **ppEnd,List *pNode)
{
	if(*ppHead==NULL)
	{
		*ppHead=pNode;
	}
	else
	{
		(*ppEnd)->pNext=pNode;
	}
	*ppEnd=pNode;

	return;
}


////////可删除重复的节点；
void DeleteNode(List **ppHead,List  **ppEnd,int id)

{
	List *pMark=*ppHead;
	List *pDel=NULL;
	if((*ppHead)->id==id)
{
	*ppHead=(*ppHead)->pNext;
	free(pDel);
	pDel=NULL;
	return;
}
	while(pMark->pNext!=NULL)//遍历链表
	{
		 int i=0;
		if(pMark->pNext->id==id)
		{
			pDel=pMark->pNext;
			if(pMark->pNext->pNext==NULL)//判断删除的是否为最后一个节点
			{
				pDel=pMark->pNext;
				pMark->pNext=pMark->pNext->pNext;//标记的下一个等于标记下一个的下一个；
				*ppEnd=pMark;
				free(pDel);
				pDel=NULL;
				return;
			}
			pMark->pNext=pMark->pNext->pNext;
			free(pDel);
			pDel=NULL;
		i=1;

		}
		if(i==0)
		{
		pMark=pMark->pNext;
		}
	}

		return;
}