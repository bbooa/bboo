#include<stdio.h>
#include<string.h>
#include<stdlib.h>
typedef struct NODE
{
	int id;
	struct NODE *pNext;

}List;
List * GetNode(int id);
void InsetNode(List **ppHead,List **ppEnd,List *pNode,int id);
void AddGetNode(List **ppHead,List **ppEnd,List *pNode);
void DeleteNode(List **ppHead,List **ppEnd,int id);
int main()
{
	List *pHead=NULL;
	List *pEnd=NULL;
	AddGetNode(&pHead,&pEnd,GetNode(1));
	AddGetNode(&pHead,&pEnd,GetNode(2));
	AddGetNode(&pHead,&pEnd,GetNode(3));
	AddGetNode(&pHead,&pEnd,GetNode(4));
	//InsetNode(&pHead,&pEnd,GetNode(5),5);
	DeleteNode(&pHead,&pEnd,4);
	while(pHead!=NULL)
	{
		printf("%d\n",pHead->id);
		pHead=pHead->pNext;
	}

return 0;
}
List * GetNode(int id)
{
	List *pTemp=(List *)malloc(sizeof(List));
	pTemp->id=id;
	pTemp->pNext=NULL;
	return pTemp;

}

void AddGetNode(List **ppHead,List **ppEnd,List *pNode)
{
	if(*ppHead==NULL)
	{
		*ppHead=pNode;
	}
	else
	{
		(*ppEnd)->pNext=pNode;
	}
	*ppEnd=pNode;

	return;
}
void DeleteNode(List **ppHead,List **ppEnd,int id)
{
	List *pDel = NULL;
	List *pMark = *ppHead;
	if((*ppHead)->id == id)
	{
		pDel = *ppHead;
		*ppHead = (*ppHead)->pNext;
		free(pDel);
		pDel = NULL;

		return;
	}

	//中间删除
	while(pMark->pNext != NULL)
	{
		int i=0;
	//标记停在要删除节点的前一个
		if(pMark->pNext->id == id)
		{
		//标记的下一个指向标记的下一个的下一个
			pDel = pMark->pNext;
			pMark->pNext = pMark->pNext->pNext;
		//删除节点
			free(pDel);
			pDel = NULL;
		//判断删除的是或否是尾节点
			if(pMark->pNext == NULL)
			{
			//尾指针指向标记
				*ppEnd = pMark;
			}
			return;
		}
		if(i==0)
		{
		pMark = pMark->pNext;
		}
	}

	return;
}