/*
线程同步： 解决线程并发所产生的问题
       1.原子访问： 同一时刻只允许一个线程去访问资源  Interlocked一系列函数 锁的是一个变量
        //InterlockedDecrement(&pthis->m_nTicket);
	    volatile 防止编译优化，对特殊地址的稳定访问。  比如 int i=0;
		  int i=0;
		  int j=i;
		  int k=i; i为了优化 会存取到寄存器里 避免每次访问内存(i) 如果其他线程 i 的值改变 会造成值偏差本地i还是不会变
	   2.关键段（临界区）： 同一时刻只允许一个线程去访问一个#代码段#
	      1)直接阻塞 2）旋转锁 3）异步
                 1直接等待进不去就阻塞       2进去前睡一会，进不去再阻塞
                 3常试往里进进不去就不进
	     
	   3)内核对象： 互斥量  同一时刻只允许一个线程去访问一个代码段

互斥量与关键段区别	   1.作用范围（互：可以跨进程）：2.灵活，安全（互：强制杀死进程不影响互斥量 因为是在内核模式） 
 3.效率  关键段效率高  因为关键段是在用户模式中进行
进程组成：：
  --------
| 内核模式 |
----------
| 用户模式 |
----------
| 空指针    |
----------
*/
//线程函数